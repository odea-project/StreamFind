% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/engine_CoreEngine.R
\name{CoreEngine}
\alias{CoreEngine}
\title{CoreEngine R6 class and methods}
\description{
The CoreEngine R6 class is used to harmonize methods across different data specific
engines. Users should not use this class directly but the data specific engines.
}
\note{
The engine data is saved in an \strong{rds} file and loaded in the app. If save file is
defined in the engine it is used, otherwise the save file name is automatically set to the
engine class name and the date in the format \strong{rds}. Changes made in the app can be saved
in the \strong{rds} file and then loaded to continue working on the engine by scripting.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{Metadata}}{A \link{Metadata} S7 class object.}

\item{\code{Workflow}}{A \link{Workflow} S7 class object.}

\item{\code{Analyses}}{A \link{Analyses} S7 class object.}

\item{\code{AuditTrail}}{A \link{AuditTrail} S7 class object. Only getter method.}

\item{\code{Config}}{A \link{EngineConfig} S7 class object.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CoreEngine-new}{\code{CoreEngine$new()}}
\item \href{#method-CoreEngine-clear_cache}{\code{CoreEngine$clear_cache()}}
\item \href{#method-CoreEngine-clear_results}{\code{CoreEngine$clear_results()}}
\item \href{#method-CoreEngine-get_cache_info}{\code{CoreEngine$get_cache_info()}}
\item \href{#method-CoreEngine-get_cache_size}{\code{CoreEngine$get_cache_size()}}
\item \href{#method-CoreEngine-has_analyses}{\code{CoreEngine$has_analyses()}}
\item \href{#method-CoreEngine-has_results}{\code{CoreEngine$has_results()}}
\item \href{#method-CoreEngine-load}{\code{CoreEngine$load()}}
\item \href{#method-CoreEngine-print}{\code{CoreEngine$print()}}
\item \href{#method-CoreEngine-save}{\code{CoreEngine$save()}}
\item \href{#method-CoreEngine-run}{\code{CoreEngine$run()}}
\item \href{#method-CoreEngine-run_workflow}{\code{CoreEngine$run_workflow()}}
\item \href{#method-CoreEngine-run_app}{\code{CoreEngine$run_app()}}
\item \href{#method-CoreEngine-clone}{\code{CoreEngine$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-new"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-new}{}}}
\subsection{Method \code{new()}}{
Creates a \code{CoreEngine} R6 class object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$new(metadata = NULL, workflow = NULL, analyses = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{metadata}}{A named list or a \code{Metadata} object. Each list element must have length one.
There is no type restrictions except for name (must be type character), author (must be type
character) and date (must be class POSIXct or POSIXt). A file entry must be a character string
with a full path to a file.}

\item{\code{workflow}}{A \code{Workflow} object, a list of \code{ProcessingStep} objects or a character string
with a full path to a \emph{rds} or \emph{json} file containing a \code{Workflow}.}

\item{\code{analyses}}{An \code{Analyses} child class or a data specific analyses input.
See each data specific engine for details.}

\item{\code{...}}{Additional data specific engine arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-clear_cache"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-clear_cache}{}}}
\subsection{Method \code{clear_cache()}}{
Clears the cache.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$clear_cache(value = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A character vector with the names of the cache categories to clear. An integer
vector with the indices of the categories to clear can alternatively be given to remove
categories. If \code{NULL} (the default), the entire cache is cleared. Use the method
\code{get_cache_info} to get the cached categories.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-clear_results"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-clear_results}{}}}
\subsection{Method \code{clear_results()}}{
Clears all result objects in the \code{Analyses}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$clear_results()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-get_cache_info"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-get_cache_info}{}}}
\subsection{Method \code{get_cache_info()}}{
Gets a data.table with the cached data categories.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$get_cache_info()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-get_cache_size"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-get_cache_size}{}}}
\subsection{Method \code{get_cache_size()}}{
Gets the current size of the cache file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$get_cache_size()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-has_analyses"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-has_analyses}{}}}
\subsection{Method \code{has_analyses()}}{
Checks if there are analyses files/objects in the \code{Analyses}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$has_analyses()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-has_results"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-has_results}{}}}
\subsection{Method \code{has_results()}}{
Checks if there are \code{Results} in the engine.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$has_results(value = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A string or a vector of strings with the name/s of the \code{Results} child/s for
checking the presence in the engine.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-load"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-load}{}}}
\subsection{Method \code{load()}}{
Loads engine data from an \strong{sqlite} or \strong{rds} file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$load(file = NA_character_)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A string with the full file path of the \strong{sqlite} or \strong{rds} file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-print"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-print}{}}}
\subsection{Method \code{print()}}{
Prints a summary to the console.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-save"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-save}{}}}
\subsection{Method \code{save()}}{
Saves the engine data as an \strong{sqlite} or \strong{rds} file. If no file path is
given, the engine data is saved in the file of the \code{Metadata}. If no file is specified
in the \code{Metadata} the engine data is saved as \strong{rds} format with the engine class
name and date in the \code{Metadata} as file name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$save(file = NA_character_)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A string with the full file path of the \strong{sqlite} or \strong{rds} file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-run"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-run}{}}}
\subsection{Method \code{run()}}{
Runs a processing method defined by the \code{ProcessingStep} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$run(step = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step}}{A \code{ProcessingStep} object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-run_workflow"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-run_workflow}{}}}
\subsection{Method \code{run_workflow()}}{
Runs all processing steps in Workflow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$run_workflow()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-run_app"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-run_app}{}}}
\subsection{Method \code{run_app()}}{
Runs the StreamFind Shiny app to explore and manage the engine data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$run_app()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoreEngine-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CoreEngine-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoreEngine$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
