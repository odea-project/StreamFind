% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_Engine_MassSpecEngine.R
\name{MassSpecEngine}
\alias{MassSpecEngine}
\title{Engine dedicated to Mass Spectrometry (MS) data processing}
\description{
The \code{MassSpecEngine} R6 class is a framework for parsing, processing and inspecting mass spectrometry (MS) data. The engine has \emph{MassSpec} as data type. The \emph{Analyses} active field has class \link{MassSpecAnalyses}, where MS data (i.e., spectra and chromatograms, including chromatograms produced by UV detection) can be loaded from \emph{mzML} and \emph{mzXML}. See methods \link{MassSpecAnalyses} for more details. If \code{msconvert} from \href{https://proteowizard.sourceforge.io/}{ProteoWizard} is installed and found via CLI (i.e., must be added to the environmental variables), the engine can also load vendor formats (i.e., Agilent MassHunter .d, Thermo Scientific RAW, Shimadzu LCD (except ITOF), Sciex WIFF /WIFF2) by direct conversion to mzML. Note that conversion of vendor formats is only possible under Windows OS. The \emph{results} active field is a list that can hold the classes: \link{MassSpecResults_NonTargetAnalysis}, \link{MassSpecSpectra} and \link{Chromatograms}. Note that the \emph{MassSpecEngine} is a subclass of \link{Engine} and inherits all methods from the parent class.
}
\note{
The \code{MassSpecEngine} is using several \href{https://github.com/rickhelmus/patRoon}{patRoon} assets for assembly of Non-Target Analysis (NTA) data processing workflows.
}
\references{
\insertRef{patroon01}{StreamFind}

\insertRef{patroon02}{StreamFind}

\insertRef{pugixml01}{StreamFind}

\insertRef{proteo01}{StreamFind}

\insertRef{proteo02}{StreamFind}
}
\seealso{
\link{Engine} for the parent class.

\link{Engine}
}
\section{Super class}{
\code{\link[StreamFind:Engine]{StreamFind::Engine}} -> \code{MassSpecEngine}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{MassSpecResults_NonTargetAnalysis}}{Get/Set for the \code{MassSpecResults_NonTargetAnalysis} results class.}

\item{\code{Spectra}}{Get/set for the \code{MassSpecSpectra} results class.}

\item{\code{Chromatograms}}{Get/set for the chromatograms results class.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MassSpecEngine-new}{\code{MassSpecEngine$new()}}
\item \href{#method-MassSpecEngine-clone}{\code{MassSpecEngine$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="clear_cache"><a href='../../StreamFind/html/Engine.html#method-Engine-clear_cache'><code>StreamFind::Engine$clear_cache()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="clear_results"><a href='../../StreamFind/html/Engine.html#method-Engine-clear_results'><code>StreamFind::Engine$clear_results()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="get_cache_info"><a href='../../StreamFind/html/Engine.html#method-Engine-get_cache_info'><code>StreamFind::Engine$get_cache_info()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="get_cache_size"><a href='../../StreamFind/html/Engine.html#method-Engine-get_cache_size'><code>StreamFind::Engine$get_cache_size()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="has_analyses"><a href='../../StreamFind/html/Engine.html#method-Engine-has_analyses'><code>StreamFind::Engine$has_analyses()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="has_results"><a href='../../StreamFind/html/Engine.html#method-Engine-has_results'><code>StreamFind::Engine$has_results()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="load"><a href='../../StreamFind/html/Engine.html#method-Engine-load'><code>StreamFind::Engine$load()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="print"><a href='../../StreamFind/html/Engine.html#method-Engine-print'><code>StreamFind::Engine$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="run"><a href='../../StreamFind/html/Engine.html#method-Engine-run'><code>StreamFind::Engine$run()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="run_app"><a href='../../StreamFind/html/Engine.html#method-Engine-run_app'><code>StreamFind::Engine$run_app()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="run_workflow"><a href='../../StreamFind/html/Engine.html#method-Engine-run_workflow'><code>StreamFind::Engine$run_workflow()</code></a></span></li>
<li><span class="pkg-link" data-pkg="StreamFind" data-topic="Engine" data-id="save"><a href='../../StreamFind/html/Engine.html#method-Engine-save'><code>StreamFind::Engine$save()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MassSpecEngine-new"></a>}}
\if{latex}{\out{\hypertarget{method-MassSpecEngine-new}{}}}
\subsection{Method \code{new()}}{
Creates an R6 \code{MassSpecEngine} class object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MassSpecEngine$new(
  metadata = NULL,
  workflow = NULL,
  analyses = NULL,
  centroid = FALSE,
  levels = c(1, 2)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{metadata}}{A named list or a \code{Metadata} object. Each list element must have length one.
There is no type restrictions except for name (must be type character), author (must be type
character) and date (must be class POSIXct or POSIXt). A file entry must be a character string
with a full path to a file.}

\item{\code{workflow}}{A \code{Workflow} object, a list of \code{ProcessingStep} objects or a character string
with a full path to a \emph{rds} or \emph{json} file containing a \code{Workflow}.}

\item{\code{analyses}}{A \link{MassSpecAnalyses} class object or a \verb{character vector} with full file paths to mzML files or a \code{data.frame} with \code{colnames}: "file", "replicate" and "blank". The "replicate" column is used to group the analyses and the "blank" column is used to identify the blank samples. The "file" column is the full path to the mzML files. If \code{msconvert} from \href{https://proteowizard.sourceforge.io/}{ProteoWizard} is installed and found via CLI (i.e., must be added to the environmental variables), the engine can also load vendor formats (i.e., Agilent MassHunter .d, Thermo Scientific RAW, Shimadzu LCD (except ITOF), Sciex WIFF / WIFF2) by direct conversion to mzML. Note that conversion of vendor formats is only possible under Windows OS.}

\item{\code{centroid}}{Logical (length 1). Set to \code{TRUE} to centroid data when converting from vendor formats to mzML.}

\item{\code{levels}}{Numeric vector with the MS levels to consider when centroiding data. Default is \code{c(1, 2)}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{MassSpecEngine} class object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MassSpecEngine-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MassSpecEngine-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MassSpecEngine$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
