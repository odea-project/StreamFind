% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{test_hdf5_performance}
\alias{test_hdf5_performance}
\title{Test HDF5 write performance with large matrix data}
\usage{
test_hdf5_performance(
  data_list,
  file_name = "performance_test.h5",
  enable_compression = FALSE,
  enable_chunking = FALSE
)
}
\arguments{
\item{data_list}{List containing 100 numeric vectors, each with 100,000 elements}

\item{file_name}{Name of the output HDF5 file (default: "performance_test.h5")}

\item{enable_compression}{Logical, enable gzip compression (default: false)}

\item{enable_chunking}{Logical, enable chunking for better I/O performance (default: false)}
}
\value{
List containing performance metrics and file information
}
\description{
This function tests the performance of writing a large matrix (100 columns x 100,000 rows)
to an HDF5 file. It measures conversion time, write time, and file size, providing
comprehensive performance metrics for HDF5 operations.
}
\details{
The function expects the input data as a list where each element represents a column
of the matrix. Each column should contain exactly 100,000 numeric values.

Performance metrics returned:
\itemize{
\item conversion_time_ms: Time to convert R list to C++ data structures
\item write_time_ms: Time to write data to HDF5 file
\item total_time_ms: Total execution time
\item file_size_bytes/mb: Size of the created HDF5 file
\item data_size_mb: Raw size of the data in memory
}
}
\examples{
\dontrun{
# Generate test data
test_data <- generate_test_data_cpp()

# Run performance test without compression
result1 <- test_hdf5_performance(test_data, "test_no_compress.h5")

# Run performance test with compression
result2 <- test_hdf5_performance(test_data, "test_compressed.h5", TRUE, FALSE)

# Run performance test with both compression and chunking
result3 <- test_hdf5_performance(test_data, "test_full.h5", TRUE, TRUE)

# Compare file sizes
cat("No compression:", round(result1$file_size_mb, 2), "MB\n")
cat("With compression:", round(result2$file_size_mb, 2), "MB\n")
cat("Compression ratio:", round(result2$compression_ratio, 2), ":1\n")
}
}
