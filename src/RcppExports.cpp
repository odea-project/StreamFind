// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_parse_ms_analysis
Rcpp::List rcpp_parse_ms_analysis(std::string file_path);
RcppExport SEXP _StreamFind_rcpp_parse_ms_analysis(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_ms_analysis(file_path));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_ms_spectra_headers
Rcpp::List rcpp_parse_ms_spectra_headers(std::string file_path);
RcppExport SEXP _StreamFind_rcpp_parse_ms_spectra_headers(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_ms_spectra_headers(file_path));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_ms_chromatograms_headers
Rcpp::List rcpp_parse_ms_chromatograms_headers(std::string file_path);
RcppExport SEXP _StreamFind_rcpp_parse_ms_chromatograms_headers(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_ms_chromatograms_headers(file_path));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_ms_spectra
Rcpp::List rcpp_parse_ms_spectra(Rcpp::List analysis, std::vector<int> levels, Rcpp::DataFrame targets, double minIntensityMS1, double minIntensityMS2);
RcppExport SEXP _StreamFind_rcpp_parse_ms_spectra(SEXP analysisSEXP, SEXP levelsSEXP, SEXP targetsSEXP, SEXP minIntensityMS1SEXP, SEXP minIntensityMS2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type analysis(analysisSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< double >::type minIntensityMS1(minIntensityMS1SEXP);
    Rcpp::traits::input_parameter< double >::type minIntensityMS2(minIntensityMS2SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_ms_spectra(analysis, levels, targets, minIntensityMS1, minIntensityMS2));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_ms_chromatograms
Rcpp::List rcpp_parse_ms_chromatograms(Rcpp::List analysis, std::vector<int> idx);
RcppExport SEXP _StreamFind_rcpp_parse_ms_chromatograms(SEXP analysisSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type analysis(analysisSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_ms_chromatograms(analysis, idx));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_fill_bin_spectra
std::vector<double> rcpp_fill_bin_spectra(Rcpp::DataFrame spectra, Rcpp::DataFrame bin_mat, Rcpp::List bins, double overlap, std::string summaryFunction);
RcppExport SEXP _StreamFind_rcpp_fill_bin_spectra(SEXP spectraSEXP, SEXP bin_matSEXP, SEXP binsSEXP, SEXP overlapSEXP, SEXP summaryFunctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type bin_mat(bin_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    Rcpp::traits::input_parameter< std::string >::type summaryFunction(summaryFunctionSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_fill_bin_spectra(spectra, bin_mat, bins, overlap, summaryFunction));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_ms_annotation_isotopes
Rcpp::List rcpp_ms_annotation_isotopes(Rcpp::DataFrame features, int maxIsotopes, Rcpp::CharacterVector elements, std::string mode, int maxCharge, double rtWindowAlignment, int maxGaps, double maxCarbons, double maxHetero, double maxHalogens, bool verbose);
RcppExport SEXP _StreamFind_rcpp_ms_annotation_isotopes(SEXP featuresSEXP, SEXP maxIsotopesSEXP, SEXP elementsSEXP, SEXP modeSEXP, SEXP maxChargeSEXP, SEXP rtWindowAlignmentSEXP, SEXP maxGapsSEXP, SEXP maxCarbonsSEXP, SEXP maxHeteroSEXP, SEXP maxHalogensSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< int >::type maxIsotopes(maxIsotopesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type elements(elementsSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type maxCharge(maxChargeSEXP);
    Rcpp::traits::input_parameter< double >::type rtWindowAlignment(rtWindowAlignmentSEXP);
    Rcpp::traits::input_parameter< int >::type maxGaps(maxGapsSEXP);
    Rcpp::traits::input_parameter< double >::type maxCarbons(maxCarbonsSEXP);
    Rcpp::traits::input_parameter< double >::type maxHetero(maxHeteroSEXP);
    Rcpp::traits::input_parameter< double >::type maxHalogens(maxHalogensSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_ms_annotation_isotopes(features, maxIsotopes, elements, mode, maxCharge, rtWindowAlignment, maxGaps, maxCarbons, maxHetero, maxHalogens, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_ms_cluster_spectra
Rcpp::List rcpp_ms_cluster_spectra(Rcpp::DataFrame spectra, double mzClust, double presence, bool verbose);
RcppExport SEXP _StreamFind_rcpp_ms_cluster_spectra(SEXP spectraSEXP, SEXP mzClustSEXP, SEXP presenceSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< double >::type mzClust(mzClustSEXP);
    Rcpp::traits::input_parameter< double >::type presence(presenceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_ms_cluster_spectra(spectra, mzClust, presence, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_ms_groups_correspondence
bool rcpp_ms_groups_correspondence(Rcpp::DataFrame groups, Rcpp::DataFrame features, bool verbose);
RcppExport SEXP _StreamFind_rcpp_ms_groups_correspondence(SEXP groupsSEXP, SEXP featuresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type features(featuresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_ms_groups_correspondence(groups, features, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_centroid_spectra_qCentroids
Rcpp::List rcpp_centroid_spectra_qCentroids(Rcpp::DataFrame spectra, int maxScale, int mode);
RcppExport SEXP _StreamFind_rcpp_centroid_spectra_qCentroids(SEXP spectraSEXP, SEXP maxScaleSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< int >::type maxScale(maxScaleSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_centroid_spectra_qCentroids(spectra, maxScale, mode));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_asc_file
Rcpp::List rcpp_parse_asc_file(std::string file_path);
RcppExport SEXP _StreamFind_rcpp_parse_asc_file(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_asc_file(file_path));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_write_asc_file
void rcpp_write_asc_file(const std::string& file, Rcpp::List metadata_list, Rcpp::NumericMatrix spectra);
RcppExport SEXP _StreamFind_rcpp_write_asc_file(SEXP fileSEXP, SEXP metadata_listSEXP, SEXP spectraSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type metadata_list(metadata_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type spectra(spectraSEXP);
    rcpp_write_asc_file(file, metadata_list, spectra);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StreamFind_rcpp_parse_ms_analysis", (DL_FUNC) &_StreamFind_rcpp_parse_ms_analysis, 1},
    {"_StreamFind_rcpp_parse_ms_spectra_headers", (DL_FUNC) &_StreamFind_rcpp_parse_ms_spectra_headers, 1},
    {"_StreamFind_rcpp_parse_ms_chromatograms_headers", (DL_FUNC) &_StreamFind_rcpp_parse_ms_chromatograms_headers, 1},
    {"_StreamFind_rcpp_parse_ms_spectra", (DL_FUNC) &_StreamFind_rcpp_parse_ms_spectra, 5},
    {"_StreamFind_rcpp_parse_ms_chromatograms", (DL_FUNC) &_StreamFind_rcpp_parse_ms_chromatograms, 2},
    {"_StreamFind_rcpp_fill_bin_spectra", (DL_FUNC) &_StreamFind_rcpp_fill_bin_spectra, 5},
    {"_StreamFind_rcpp_ms_annotation_isotopes", (DL_FUNC) &_StreamFind_rcpp_ms_annotation_isotopes, 11},
    {"_StreamFind_rcpp_ms_cluster_spectra", (DL_FUNC) &_StreamFind_rcpp_ms_cluster_spectra, 4},
    {"_StreamFind_rcpp_ms_groups_correspondence", (DL_FUNC) &_StreamFind_rcpp_ms_groups_correspondence, 3},
    {"_StreamFind_rcpp_centroid_spectra_qCentroids", (DL_FUNC) &_StreamFind_rcpp_centroid_spectra_qCentroids, 3},
    {"_StreamFind_rcpp_parse_asc_file", (DL_FUNC) &_StreamFind_rcpp_parse_asc_file, 1},
    {"_StreamFind_rcpp_write_asc_file", (DL_FUNC) &_StreamFind_rcpp_write_asc_file, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_StreamFind(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
