---
title: "Evaluation of monoclonal antibodies"
author: "Ricardo Cunha"
date: "`r format(Sys.time(), '%d %B, %Y')`"
toc: true
format:
  html:
    grid:
      sidebar-width: 300px
      body-width: 1200px
      margin-width: 300px
      gutter-width: 1.5rem
    other-links:
      - text: StreamFind
        href: https://odea-project.github.io/StreamFind/
        icon: github
    html-math-method: katex
    theme: journal
    code-tools: true
    anchor-sections: true
    code-fold: true
    code-overflow: scroll
    code-line-numbers: false
    code-copy: true
    cap-location: top
    self-contained: true
    embed-resources: true
    toc: true
    toc-location: left
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false

options(DT.options = list(
  dom = "lfrtip",
  autoWidth = TRUE,
  pageLength = 10,
  lengthMenu = c(10, 20, 50, 75, 100),
  initComplete = htmlwidgets::JS(
    "function(settings, json) {",
    "$(this.api().table().body()).css({'font-size': '12px'});",
    "$(this.api().table().body()).css({'white-space': 'nowrap'});",
    "}"
  )
))
```

```{r}
#| include: false

library(knitr)
library(kableExtra)
library(data.table)
library(DT)
library(magrittr)
library(ggplot2)
library(plotly)
library(StreamFind)
```

```{r}
#| include: false

# path <- "C:/Users/thiss/Documents/Anal_Bioanal_Chem_StreamFind_OnlineRaman"
path <- "I:/Anal_Bioanal_Chem_StreamFind_OnlineRaman"
avastin_files <- paste0(path, "/Bevacizumab_Avastin_LotB8703H40")
zirabev_files <- paste0(path, "/Bevacizumab_Zirabev_LotFR7476")
avastin_files_ms <- list.files(avastin_files, pattern = ".d$", full.names = TRUE)
avastin_files_rs <- list.files(avastin_files, pattern = ".sif$", full.names = TRUE)
zirabev_files_ms <- list.files(zirabev_files, pattern = ".d$", full.names = TRUE)
zirabev_files_rs <- list.files(zirabev_files, pattern = ".sif$", full.names = TRUE)
```

# MS

```{r}
ms <- MassSpecEngine$new(
  analyses = c(avastin_files_ms, zirabev_files_ms),
  centroid = TRUE
)

ms$add_replicate_names(c("avastin", "zirabev"))
```

```{r}
DT::datatable(ms$analyses$info)
```

```{r}
ms$plot_spectra_tic(colorBy = "replicates")
```

# Raman

```{r}
rs <- RamanEngine$new(
  analyses = c(avastin_files_rs, zirabev_files_rs)
)

rs$add_replicate_names(c("avastin", "zirabev"))
```

```{r}
DT::datatable(rs$analyses$info)
```

```{r}
rs$run(
  RamanMethod_BinSpectra_StreamFind(
    binNames = "rt",
    binValues = 30,
    byUnit = FALSE
  )
)
```

```{r}
rs$run(
  RamanMethod_SubtractSpectraSection_StreamFind(
    sectionVal = "rt",
    sectionWindow = c(10, 200)
  )
)
```

```{r}
rs$run(
  RamanMethod_DeleteSpectraSection_StreamFind(
    rtmin = 0,
    rtmax = 20
  )
)
```

```{r}
rs$run(
  RamanMethod_FindChromPeaks_LocalMaxima(
    minWidth = 10,
    maxWidth = 15,
    minHeight = 50000
  )
)

pks <- rs$analyses$spectra$chrom_peaks
pks[[1]] <- pks[[1]][-1, ]
pks[[2]] <- pks[[2]][-1, ]
rs$analyses$spectra$chrom_peaks <- pks
# plot_chromatograms_peaks(rs$analyses, colorBy = "replicates")
```

```{r}
rs$run(
  RamanMethod_FilterSpectra_StreamFind(
    onlyChromPeaksSpectra = TRUE
  )
)
```

```{r}
rs$run(
  RamanMethod_DeleteSpectraSection_StreamFind(
    shiftmin = -100,
    shiftmax = 500
  )
)

rs$run(
  RamanMethod_DeleteSpectraSection_StreamFind(
    shiftmin = 2000,
    shiftmax = 3000
  )
)
```

```{r}
rs$run(
  RamanMethod_CorrectSpectraBaseline_baseline_als(
    lambda = 3,
    p = 0.015,
    maxit = 10
  )
)
```

```{r}
rs$run(
  RamanMethod_AverageSpectra_StreamFind(
    by = "replicates+chrom_peaks",
    weightedAveraged = FALSE
  )
)
```

```{r}
rs$get_spectra()
rs$plot_spectra(colorBy = "replicates+targets")
```






```{r}
plot_spectra_3d(rs$analyses, colorBy = "replicates+targets")
```

```{r}
plot_spectra_3d(rs$analyses)
```

```{r}
rs$plot_spectra(rt = c(620, 640), shift = c(400, 1800))
```














```{r}
rs$run(
  RamanMethod_DeleteSpectraSection_StreamFind(
    rtmin = 0,
    rtmax = 401
  )
)

rs$run(
  RamanMethod_DeleteSpectraSection_StreamFind(
    rtmin = 427,
    rtmax = 2000
  )
)
```

```{r}
rs$plot_chromatograms()
```

```{r raman-workflow}
rs_workflow <- list(
  RamanMethod_BinSpectra_StreamFind(
    binNames = "rt",
    binValues = 21,
    byUnit = FALSE
  ),

  RamanMethod_SubtractSpectraSection_StreamFind(
    sectionVal = "rt",
    sectionWindow = c(0, 400)
  ),

  RamanMethod_DeleteSpectraSection_StreamFind(
    shiftmin = -100,
    shiftmax = 315
  ),

  RamanMethod_SmoothSpectra_savgol(
    fl = 11,
    forder = 2,
    dorder = 0
  ),

  RamanMethod_DeleteSpectraSection_StreamFind(
    shiftmin = 315,
    shiftmax = 330
  ),

  RamanMethod_DeleteSpectraSection_StreamFind(
    shiftmin = 2300,
    shiftmax = 2600
  ),

  RamanMethod_CorrectSpectraBaseline_baseline_als(
    lambda = 3,
    p = 0.015,
    maxit = 10
  ),

  RamanMethod_DeleteSpectraSection_StreamFind(
    rtmin = 0,
    rtmax = 420
  ),

  RamanMethod_DeleteSpectraSection_StreamFind(
    rtmin = 430,
    rtmax = 900
  ),

  RamanMethod_AverageSpectra_StreamFind(),

  RamanMethod_NormalizeSpectra_minmax(),

  RamanMethod_NormalizeSpectra_blockweight()
)

rs$workflow <- rs_workflow

rs$print_workflow()
```

```{r raman-what does sectionWindow mean?}
rs_workflow <- list(
  RamanMethod_BinSpectra_StreamFind(
    binNames = "rt",
    binValues = 21,
    byUnit = FALSE
  ),

  RamanMethod_SubtractSpectraSection_StreamFind(
    sectionVal = "rt",
    sectionWindow = c(0, 200)
  ))

rs$workflow <- rs_workflow

rs$plot_spectra()

```
  
```{r raman-workflow-run}
rs$run_workflow()
```

```{r raman-plot_spectra-baseline, fig.cap="Baseline correction for each spectra."}
rs$plot_spectra_baseline()
```

```{r raman-plot_spectra, fig.cap="Processed Raman spectra for each BSA product."}
rs$plot_spectra()
```

